Knowledge summary

1.git是先进的分布式版本控制系统
2.第一次安装git需要设置：
  git config —-global user.name “xxx”
  git config —-global user.email “xxx”
  （—-global参数表示此计算机上的所有git仓库都会使用这个配置）
3.创建版本库：
  a.最好创建一个空的目录，也可以选择已有文件的目录（不要包含中文）
  b.通过git init命令把该目录变成git可以管理的仓库
4.git分布式版本管理系统包括两个区：
  一.工作区（Working directory）：
    电脑里能看到的目录（不包括隐藏目录版本库.git）
  二.版本库（Repository）
    a.暂存区（stage/index）
    b.分支（master）
5.添加文件到版本库：
  a.git add <file>：把工作区的文件放入暂存区（stage），可反复使用添加多个文件
  b.git commit -m “xxx”：一次性把stage中的文件全部提交到分支中（master），“xxx”内容为本次提交的注释说明
6.git status：查看当前仓库的状态
7.git diff：查看working中版本与stage中版本的差异，也就是正在编辑中文件，与最后一次add版本作对比，一般在add前使用
8.git diff —-cached/staged：查看stage中版本与master中的HEAD版本间差异，也就是最后一次add版本与最后一次commit版本作对比，一般在commit前使用
9.git diff HEAD：查看working中版本与master中的HEAD版本间差异，还未add版本与最后一次commit版本作对比
10.git diff —-stat：查看简单对比结果，可以添加—-stat参数（查看哪些文件被改动）
11.git log：查看提交历史记录（—-pretty=oneline参数可以简化记录信息）
12.git reflog：查看命令历史记录
13.git reset —-hard HEAD^：回到上一个版本（此处的版本都为master中的版本，可以直接写版本号）
14.git checkout —- <file>：撤销working版本的修改，还原成master中的HEAD版本
15.git reset HEAD <file>：可以消除stage中的版本（如果把HEAD换成HEAD^则会把HEAD^的版本替换进stage中）
16.删除版本：
  a.git rm <file>：删除working中的版本并提交到stage（手动删除working中版本时也可用git add <file>提交版本到stage）
  b.git commit -m “xxx”：删除master中的版本
17.通过SSH加密本地Git仓库与GitHub仓库之间的传输：
  a.确认用户目录下是否有隐藏文件夹 .ssh，其中是否有 id_rsa和 id_rsa.pub这两个文件，没有的话需要创建SSH Key：在终端输入 ssh-keygen -t rsa -C ”xxxx@example.com”（一般无需设置密码）
  b.id_rsa是私匙，不要泄露，id_rsa.pub是公匙，可以告诉他人
  c.登录GitHub，打开“Account settings”，“SSH Keys”页面，填上任意Title，在Key文本框里粘贴 id_rsa.pub文件的内容
  d.点击“add key”
  （想要其它电脑可以往GitHub上推送，都需要公匙才可以）
18.添加远程库：
  为了把本地Git仓库添加到GitHub上的仓库，达到既可以备份又可以让其他人通过该仓库进行协作的目的，需要以下操作：
  a.登录GitHub，点击“Create a new repo”按钮
  b.在“Repository name”内填入GitHub仓库的新名字，其他保持默认设置，点击“Create repository”按钮
  c.关联远程库：git remote add origin git@server-name:path/repo-name.git（可以直接网页上复制）
  d.推送master分支的所有内容：git push -u origin master（1.-u 参数会把本地的master分支和远程的master分支关联起来，以后推送或者拉取时可以简化命令。2.第一次推送时会得到一个警告，需要确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可）
  d.本地每次提交后，可以使用 git push origin master 推送最新修改
19.从远程仓库克隆到本地仓库：
  a.因为要使用SSH协议，所以先确认需要克隆库的电脑与被克隆的GitHub账号间是否创建SSH协议，没有请参照第17条完成SSH协议（利用https协议传输速度慢，并且每次推送都需要输入口令）
  b.使用命令：git clone git@github.com:xxxxxxxx(xxx为被GitHub仓库地址，eg：liurenyou/gitskills.git)
20.创建一个分支：git branch xxx
21.切换到一个分支：git checkout xxx
22.创建并切换到分支：git checkout -b xxx
23.查看当前分支：git branch
24.A分支成果合并到B分支上：
  a.切换到B分支（git checkout B）
  b.使用命令：git merge A
25.Fast-foward（快进模式）：以第24条为例，直接把B指向A的当前提交
26.删除分支：git branch -d xxx
27.冲突问题：合并的两分支都分别有了新的提交，此时无法执行“快进模式”，所以就会产生冲突问题
28.解决冲突问题：执行合并后，打开文件，手动修改Git标记出不同分支的内容，之后再次进行提交（add与commit）,最后删除没用的分支
29.查看分支合并情况：git log —-graph —-pretty=oneline —-abbrev-commit
30.禁用“Fast-forward”合并：git merge —-no-ff -m “xxx” xxx（本次合并需要创建一个新的commit，所以加上了 -m参数写入描述信息）
31.分支策略：master分支应该非常稳定，所以仅用来发布新版本，而平时干活都应该在分支上进行
32.暂时保存工作区的内容：git stash
33.恢复stash内容并不删除stash内容：git stash apply
34.删除stash内容：git stash drop
35.恢复stash内容并删除其内容：git stash pop
36.查看stash内容：git stash list

  